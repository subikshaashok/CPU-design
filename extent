`timescale 1ns / 1ps

module extent(
    input [23:0] Instr,
    input clk,
    input [1:0] Immsrc,
    output reg [31:0] ExtImm
);

    always @(posedge clk) begin
        case (Immsrc)
            2'b00: ExtImm = {24'b0, Instr[7:0]};
            2'b01: ExtImm = {20'b0, Instr[11:0]};
            2'b10: ExtImm = {{6{Instr[23]}}, Instr[23:0], 2'b00};
            default: ExtImm = 32'bx;
        endcase
    end

endmodule
\\test branch
module extent_tb;
   reg [23:0]Instr;
   reg [1:0] Immsrc;
   reg clk;
   wire [31:0] ExtImm;
   extent uut(.Instr(Instr),.Immsrc(Immsrc),.clk(clk),.ExtImm(ExtImm));
   initial begin
       clk=1'b0;
       $finish;
       end
    always #5 clk = ~clk;
    initial begin
      Instr = 32'h F0000009;
      #10 Immsrc = 2'b00;
      #10 Immsrc = 2'b01;
      #10 Immsrc = 2'b10;
      end
      
endmodule
